[
{
	"uri": "//localhost:1313/1-introduce/1.1-docker/",
	"title": "Docker",
	"tags": [],
	"description": "",
	"content": "What is Docker Docker is a platform to provide ways to build, deploy anhd run application more easily by using containers (on virtualization platform).\n"
},
{
	"uri": "//localhost:1313/",
	"title": "Docker",
	"tags": [],
	"description": "",
	"content": "Docker Overview In this lab, you will learn the basic concepts of Docker as well as learn how to dockerize and deploy a Spring Boot project in Docker.\nContent Introduction to Docker Dockerize "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction to Docker Contents Docker Container Other concepts Dockerfile Commands In the following sections, we will delve into the fundamental concepts of Docker.\nReferences: Simple concepts of Docker 1 Simple concepts of Docker 2 "
},
{
	"uri": "//localhost:1313/2-dockerize/2.1-intellij/",
	"title": "Open Intellij",
	"tags": [],
	"description": "",
	"content": "On Intellij Open Intellij - Maven - Lifecycle - clean - install !!! Make sure there is no error when running the above process\nIf it is Build Success then go to the next step Running JAR file After Build Success, copy JAR file and open terminal Run java -jar JAR file Deploy Open file Dockerfile Copy the following code: FROM eclipse-temurin:17-jdk-focal\rWORKDIR /app\rCOPY .mvn/ .mvn\rCOPY mvnw pom.xml ./\rRUN ./mvnw dependency:go-offline\rCOPY src ./src\rCMD [\u0026#34;./mvnw\u0026#34;, \u0026#34;spring-boot:run\u0026#34;] Build Docker Image Run docker build -f Dockerfile -t spring-boot . Open Docker After build successfully, open Docker Desktop - Images Check if there is spring-boot file as you named "
},
{
	"uri": "//localhost:1313/1-introduce/1.2-container/",
	"title": "Container",
	"tags": [],
	"description": "",
	"content": "Container in Docker Containers allow programmers to dockerize an application with all the necessary parts.\nIn some way, Docker is quite similar to virtual machine. Why Docker is so common, theses are some reasons:\nEase of use: Docker is easy for every programmers. It takes advantage of container to build, test fast. Programmers can also dockerize the application on their laptop and run on public cloud, private cloud \u0026hellip; (Build once, run anywhere)\nSpeed: Docker container is lightweight and fast, you can create and run Docker container in miliseconds.\nRuntime environment and extensibility: Docker allows to split the application\u0026rsquo;s functions into seperate containers.\n"
},
{
	"uri": "//localhost:1313/2-dockerize/",
	"title": "How to deploy",
	"tags": [],
	"description": "",
	"content": "Deploy In this step, we will learn how to deploy an image.\nContent Open Intellij Open Docker "
},
{
	"uri": "//localhost:1313/2-dockerize/2.2-docker/",
	"title": "Open Docker",
	"tags": [],
	"description": "",
	"content": "Run Images Open Postman Copy the link of api. Open Docker Desktop Click Run. Check the log if the image run successfully or not. Select Exec. Paste the link copied from Postman. If the output is right, it ran successfully. "
},
{
	"uri": "//localhost:1313/1-introduce/1.3-otherconcepts/",
	"title": "Other concepts",
	"tags": [],
	"description": "",
	"content": "Some concepts related Docker client: Is a tool help user contact with Docker host. Docker daemon: Is the Docker server for requests from the Docker API. It manages images, containers, networks and volumes. Docker Registry: Is the private repository of Docker Images. Images are pushed to registry and client will pull images from registry. Users can use their own registry or a provider\u0026rsquo;s registry such as: AWS, Google Cloud, Microsoft Azure. Images: Is a template for creating a container. An image will be built based on Dockerfile. Dockerfile: Is a file that includes code for building an image. Volumns: Is the data created when a container is run. "
},
{
	"uri": "//localhost:1313/1-introduce/1.4-dockerfile/",
	"title": "Dockerfile",
	"tags": [],
	"description": "",
	"content": "What is Dockerfile Dockerfile is a config file for Docker to build an image. Here are the configs:\nFROM: Specifies the original image: python, unbuntu, alpine\u0026hellip; LABEL: Provide metadata for image. Can be used to add information maintainer. Command docker inspect to view all the label of images. ENV: Set an environment variable. RUN: Create a command to build image and install package into containers. COPY: Copy files and folders into container. ADD: Copy files and folders into container. EXPOSE: Declare port of image. VOLUME: Create a directory mount folder to access and store data. The process of a system using Docker A Docker system is implemented by three main steps:\nBuild - Push - Pull, Run "
},
{
	"uri": "//localhost:1313/1-introduce/1.5-commands/",
	"title": "Commands",
	"tags": [],
	"description": "",
	"content": "Some basic commands in Docker List image / container: docker image/container ls Delete image / container: docker image/container rm \u0026lt;image/container\u0026#39;s name\u0026gt; Delete all images: docker image rm $(docker images –a –q) List all images: docker ps –a Stop a specific container: docker stop \u0026lt;container\u0026#39;s name\u0026gt; Run a container from image and change container\u0026rsquo;s name: docker run –name \u0026lt;container\u0026#39;s name\u0026gt; \u0026lt;image\u0026#39;s name\u0026gt; Stop all container: docker stop $(docker ps –a –q) Delete all containers: docker rm $(docker ps –a –q) Show log of a container: docker logs \u0026lt;container\u0026#39;s name\u0026gt; Build an image from container: docker build -t \u0026lt;container\u0026#39;s name\u0026gt; Run a container: docker run -d \u0026lt;image\u0026#39;s name\u0026gt; Pull an image from Docker Hub: docker pull \u0026lt;image\u0026#39;s name\u0026gt; Start a container: docker start \u0026lt;container\u0026#39;s name\u0026gt; "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]